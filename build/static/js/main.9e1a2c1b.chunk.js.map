{"version":3,"sources":["Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","newObject","post","id","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","then","response","data","notesToShow","filter","map","key","find","changedNote","catch","err","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Math","random","concat","value","onChange","target","placeholder","type","ReactDOM","render","document","getElementById"],"mappings":"4NAceA,EAZF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACXC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCOjC,EAZA,WACX,OAAOK,IAAMC,IAHD,eAcD,EARA,SAAAC,GACX,OAAOF,IAAMG,KAPD,aAOeD,IAOhB,EAJA,SAACE,EAAIF,GAChB,OAAOF,IAAMK,IAAN,UAXK,aAWL,YAAwBD,GAAMF,ICLnCI,G,MAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAgB,OAAZA,EACK,KAGP,yBAAKV,UAAU,SACZU,KAgFQC,EA3EH,WAAM,MAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIcJ,oBAAS,GAJvB,mBAITK,EAJS,KAIAC,EAJA,OAKwBN,mBAAS,MALjC,mBAKTO,EALS,KAKKC,EALL,KAOhBC,qBAAU,WACRC,IACGC,MAAK,SAAAC,GAAQ,OAAIV,EAASU,EAASC,WACrC,IAEH,IAsCMC,EAAcT,EAClBJ,EAAQA,EAAMc,QAAO,SAAA/B,GAAI,OAAuB,IAAnBA,EAAKG,aAGpC,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcW,QAASS,IACvB,4BAAQjB,QAAS,kBAAMgB,GAAYD,KAAnC,SACSA,EAAU,YAAc,OAEjC,4BACGS,EAAYE,KAAI,SAAAhC,GAAI,OACnB,kBAAC,EAAD,CAAMiC,IAAKjC,EAAKW,GAAIX,KAAMA,EAAMC,iBAAkB,kBAnD/B,SAACU,GACjB,qBAAiBA,GAA1B,IACMX,EAAOiB,EAAMiB,MAAK,SAAAlC,GAAI,OAAIA,EAAKW,KAAOA,KACtCwB,EAAW,2BAAOnC,GAAP,IAAaG,WAAYH,EAAKG,YAE/CuB,EAAmBf,EAAIwB,GACpBR,MAAK,SAAAC,GACJV,EAASD,EAAMe,KAAI,SAAAhC,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAO4B,EAASC,YAE7DO,OAAM,SAAAC,GACLb,EAAgB,QAAD,OACLxB,EAAKK,QADA,8CAGfiC,YAAW,WACTd,EAAgB,QACf,QAoCuDe,CAAmBvC,EAAKW,WAGpF,0BAAM6B,SAnCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBtC,QAASc,EACThB,UAAWyC,KAAKC,SAAW,IAG7BnB,EAAmBiB,GAChBhB,MAAK,SAAAC,GACJV,EAASD,EAAM6B,OAAOlB,EAASC,OAC/BT,EAAW,SA0BX,2BAAO2B,MAAO5B,EAAS6B,SArBJ,SAACP,GACxBrB,EAAWqB,EAAMQ,OAAOF,QAoB+BG,YAAY,oBAC/D,4BAAQC,KAAK,UAAb,WChFJC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.9e1a2c1b.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n\r\n    return (\r\n        <li className='note'>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    update\r\n}","import React, {useState, useEffect} from 'react';\nimport Note from './Note';\nimport noteService from './services/notes' // This is a object\nimport './index.css'\n\n// For error messaging\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  // State props\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService.getAll()\n      .then(response => setNotes(response.data))\n  }, [])\n  \n  const toggleImportanceOf = (id) => {\n    const url = `/api/notes/${id}`\n    const note = notes.find(note => note.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService.update(id, changedNote)\n      .then(response => {\n        setNotes(notes.map(note => note.id !== id ? note : response.data))\n      })\n      .catch(err => {\n        setErrorMessage(\n          `Note ${note.content} was already removed from the server. 404`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }\n  \n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      important: Math.random() < 0.5,\n    }\n\n    noteService.create(noteObject)\n      .then(response =>  {\n        setNotes(notes.concat(response.data))\n        setNewNote('')\n      })\n    \n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll ? \n    notes : notes.filter(note => note.important === true);\n  \n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <button onClick={() => setShowAll(!showAll)}>\n        show; {showAll ? 'important' : 'all' }\n      </button>\n      <ul>\n        {notesToShow.map(note => (\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} placeholder=\"Add new Content\"/>\n        <button type=\"submit\">Save</button>\n      </form>\n    </div>\n  )\n\n}\n\nexport default App;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import App from './PhoneBook'\n//import App from './ServerData'\n\n    ReactDOM.render(\n      <App/>,\n      document.getElementById('root')\n    )\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}